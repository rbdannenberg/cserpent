require "utils"


def match(token, predicate):

    if type(predicate) == type([]):
        return token.tk_type in predicate or token.content in predicate

    # string input
    return token.tk_type == predicate or token.content == predicate


// Mutable context object passed along when `Parser` is ran on an input.
class ParseContext:

    // Input code to be parsed.
    var input
    // 1-D position of the context, i.e., the current character pointer.
    var pos
    // Error message.
    var error
    // An AST holder used for return type.
    var res
    // Partial result store (for tokens).
    var partial
    var should_ignore_whitespace

    ### CONTEXT & STUFF ###
    var types

    ### SETUPS ###

    def init(input):
        this.pos = 0
        this.input = input
        this.error = nil
        this.res = nil
        this.partial = []
        this.should_ignore_whitespace = false

        this.types = []

    def at_eof():
        return this.pos >= len(this.input)


    ### SHORTHANDS FOR PARSING ###

    def peek():
        return this.input[pos]

    def get(predicate, optional should_err = true):
        if this.should_ignore_whitespace:
            before_whitespace = this.skip_whitespace()

        if this.at_eof():
            if should_err:
                this.error_eof_with(predicate)
            if this.should_ignore_whitespace:
                this.pos = before_whitespace
            return nil
        
        tok = this.peek()
        if not match(tok, predicate):
            if should_err:
                this.err_expect(tok, predicate)
            if this.should_ignore_whitespace:
                this.pos = before_whitespace
            return nil

        return tok

    def skip(predicate, optional should_err = true):
        if this.get(predicate, should_err) == nil:
            return false

        this.pos = this.pos + 1
        return true

    def skip_store(predicate, optional should_err = true):
        tok = this.get(predicate, should_err)
        if tok == nil:
            return false

        this.partial.append(tok)
        this.pos = this.pos + 1
        return true

    def indent():
        return this.skip(TK_INDENT)

    def dedent():
        return this.skip(TK_DEDENT)

    def br():
        return this.skip(TK_BREAK)


    ### ERROR EMISSION AND HANDLING ###

    def ok():
        return this.error == nil

    def err(range, msg):
        this.error = Error(range, msg)

    def err_eof():
        err(nil, "unexpected end of file")

    def err_eof_with(predicate):
        err(nil, "unexpected end of file (expected " + str(predicate) + ")")

    def err_expect(tok, predicate):
        err(tok.range, "expected " + str(predicate) + ", got " + tok.render())

    def err_fset_miss(predicate):
        if this.at_eof():
            this.err_eof_with(predicate)

        this.err_expect(this.peek(), predicate)

    
    ### INDENTATION CONTEXT ###

    def skip_whitespace():
        curr_pos = this.pos
        for i = this.pos to len(this.input):
            if not match(this.input[i], [TK_INDENT, TK_DEDENT, TK_BREAK]):
                this.pos = i
                return curr_pos


    def skip_eol():
        if this.pos == len(this.input):
            return true
        
        return this.skip(TK_BREAK)

    
    ### MISC CONTEXT ###

    def is_type(iden):
        return iden in this.types

    
    def add_type(iden):
        this.types.append(iden)


    # When on, all encountered indentations and linebreaks will be skipped.
    def ignore_whitespace(state):
        prev = this.should_ignore_whitespace
        this.should_ignore_whitespace = state
        return prev


    ### RESULT MANIPULATION ###
    
    def set_result(ast):
        this.res = ast

    def pop_result():
        out = this.res
        this.res = nil
        return out

    def get_partial(idx):
        return this.partial[idx]

    def pop_partial():
        part = this.partial[0]
        this.partial.clear()
        return part

    def clear_partial(idx):
        this.partial.clear()
