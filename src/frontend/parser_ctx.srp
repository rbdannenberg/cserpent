require "utils"


def match(token, predicate):
    return token.tk_type == predicate or token.content == predicate


// Mutable context object passed along when `Parser` is ran on an input.
class ParseContext:

    // Input code to be parsed.
    var input
    // 1-D position of the context, i.e., the current character pointer.
    var pos
    // Error message
    var error
    // An AST holder used for return type
    var res

    ### SETUPS ###

    def init(input, file):
        this.pos = 0
        this.input = input
        this.error = nil

    def at_eof():
        return this.pos >= len(this.input)


    ### SHORTHANDS FOR PARSING ###

    def peek():
        return this.input[pos]

    def get(predicate):
        if this.at_eof():
            this.error_eof_with(predicate):
            return nil
        
        tok = this.peek()
        if not match(tok, predicate):
            this.error_expect(tok, predicate)
            return nil

        return tok

    def skip(predicate):
        return this.get(predicate) != nil


    ### ERROR EMISSION AND HANDLING ###

    def ok():
        return this.error == nil

    def err(range, msg):
        this.error = Error(range, msg)

    def err_eof():
        err(nil, "unexpected end of file")

    def err_eof_with(predicate):
        err(nil, "unexpected end of file (expected `" + predicate + "`")

    def err_expect(tok, predicate):
        err(tok.range, "expected " + predicate + ", got " + tok.render())


    ### RESULT MANIPULATION ###
    
    def set_result(ast):
        this.res = ast

    def pop_result():
        out = this.res
        this.res = nil
        return out
