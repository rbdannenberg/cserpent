// class Program:

//     // map<string, true> (imitate hash set)
//     var loaded_files

//     def init():
//         this.loaded_files = {}

class Expression:
    def init():
        pass

    def accept(visitor):
        pass

class Literal(Expression):
    var value # a value of type object_type
    var object_type

    def init(_value, _object_type):
        super.init()
        value = _value
        object_type = _object_type

    def accept(visitor):
        visitor.visitLiteral(self)

class Identifier(Expression):
    var value # a string

    def init(_value):
        super.init()
        value = _value

    def accept(visitor):
        visitor.visitIdentifier(self)

class BoolOp(Expression):
    var left
    var op
    var right
    def init(_left, _op, _right):
        super.init()
        left = _left
        op = _op # and, or
        right = _right

    def accept(visitor):
        visitor.visitBoolOp(self)

class BinOp(Expression):
    var left
    var op  # +, -, *, /, %, &, |, ^, <<, >>, **
    var right
    def init(_left, _op, _right):
        super.init()
        left = _left
        op = _op
        right = _right

    def accept(visitor):
        visitor.visitBinOp(self)

class UnaryOp(Expression):
    var op # +, -, not, ~
    var value
    def init(_op, _value):
        super.init()
        op = _op
        value = _value

    def accept(visitor):
        visitor.visitUnaryOp(self)

class Array(Expression):
    var elements # a list of expressions
    def init(_elements):
        super.init()
        elements = _elements

    def accept(visitor):
        visitor.visitArray(self)

class Dictionary(Expression):
    var pairs # a list of key-value pairs
    def init(_pairs):
        super.init()
        pairs = _pairs

    def accept(visitor):
        visitor.visitDictionary(self)

class ArgumentList:
    var args # : Array [Expression]
    var kwargs # : Dictionary[Identifier, Expression]
    def init(_args, _kwargs):
        args = _args
        kwargs = _kwargs

    def accept(visitor):
        visitor.visitArgumentList(self)

class FunctionCall(Expression):
    var function_name # : Identifier
    var parameters # : ArgumentList
    def init(_name, _parameters):
        super.init()
        function_name = _name
        parameters = _parameters

    def accept(visitor):
        visitor.visitFunctionCall(self)

class Constructor(Expression):
    var class_name # : Identifier
    var parameters # : ArgumentList
    # this is isomorphic to FunctionCall
    def init(_class_name, _parameters):
        super.init()
        class_name = _class_name
        parameters = _parameters

    def accept(visitor):
        visitor.visitConstructor(self)

class MethodCall(Expression):
    var object # : Expression
    var method_name # : Identifier
    var parameters # : ArgumentList
    def init(_object, _method_name, _parameters):
        super.init()
        object = _object
        method_name = _method_name
        parameters = _parameters

    def accept(visitor):
        visitor.visitMethodCall(self)

class GetAttribute(Expression):
    var object # : Expression
    var attribute # : Identifier
    def init(_object, _attribute):
        super.init()
        object = _object
        attribute = _attribute

    def accept(visitor):
        visitor.visitGetAttribute(self)

class Index(Expression):
    var object # : Expression
    var index # : Expression
    def init(_object, _index):
        super.init()
        object = _object
        index = _index

    def accept(visitor):
        visitor.visitIndex(self)

class BlockElement:

    def accept(visitor):
        pass

class Statement(BlockElement):

    def accept(visitor):
        pass

class Assignment(Statement):
    var identifier # : Identifier
    var expression # : Expression
    def init(_identifier, _expression):
        super.init()
        identifier = _identifier
        expression = _expression

    def accept(visitor):
        visitor.visitAssignment(self)

class StandaloneExpression(Statement):
    var expression # : Expression
    def init(_expression):
        super.init()
        expression = _expression

    def accept(visitor):
        visitor.visitStandaloneExpression(self)

class Declaration(Statement):
    var declared_type # : Identifier?
    var identifier # : Identifier
    def init(_identifier, optional _declared_type = "Any"):
        super.init()
        declared_type = _declared_type
        identifier = _identifier

    def accept(visitor):
        visitor.visitDeclaration(self)

class DeclarationNAssignment(Statement):
    var declared_type # : Identifier?
    var identifier # : Identifier
    var expression # : Expression
    def init(_declared_type, _identifier, _expression):
        super.init()
        declared_type = _declared_type
        identifier = _identifier
        expression = _expression

    def accept(visitor):
        visitor.visitDeclarationNAssignment(self)

class ReturnStatement(Statement):
    var expression # : Expression
    def init(_expression):
        super.init()
        expression = _expression

    def accept(visitor):
        visitor.visitReturnStatement(self)

class ControlFlow(BlockElement):

    def accept(visitor):
        pass

class Block:
    var statements # : List[BlockElement]
    def init(_statements):
        statements = _statements

    def accept(visitor):
        visitor.visitBlock(self)

class If(ControlFlow):
    var condition # : Expression # must be a boolean
    var block # : Block
    var else_block # : Block
    def init(_condition, _block, optional _else_block=nil):
        super.init()
        condition = _condition
        block = _block
        else_block = _else_block

    def accept(visitor):
        visitor.visitIf(self)

class While(ControlFlow):
    var condition # : Expression # must be a boolean
    var block # : Block
    def init(_condition, _block):
        super.init()
        condition = _condition
        block = _block

    def accept(visitor):
        visitor.visitWhile(self)

class ForRange(ControlFlow):
    var identifier # : Identifier # loop variable
    var start # : Expression
    var end # : Expression
    var by_amount # : Expression
    var block # : Block
    def init(_identifier, _start, _end, _by, _block):
        super.init()
        identifier = _identifier
        start = _start
        end = _end
        by_amount = _by
        block = _block

    def accept(visitor):
        visitor.visitForRange(self)


class ForEach(ControlFlow):
    var identifier # : Identifier # loop variable
    var iter # : Expression
    var block # : Block
    def init(_identifier, _iter, _end, _block):
        super.init()
        identifier = _identifier
        iter = _iter
        block = _block

    def accept(visitor):
        visitor.visitForEach(self)


class Function:
    var name # : Identifier
    var positional # : List[Identifier]
    var optional   # : List[Identifier + Default]
    var block # : Block
    def init(_name, _positional, _optional, _block):
        name = _name
        positional = _positional
        optional = _optional
        block = _block

    def accept(visitor):
        visitor.visitFunction(self)

class Class:
    var name # : Identifier
    var member_variables # : List[Declaration]
    var member_functions # : List[Function]
    def init(_name, _member_variables, _member_functions):
        name = _name
        member_variables = _member_variables
        member_functions = _member_functions

    def accept(visitor):
        visitor.visitClass(self)

class File:
    var elements # list of class/function/block elements, List[Class | Function | BlockElement] if you will
    def init(_elements):
        elements = _elements

    def accept(visitor):
        visitor.visitFile(self)
