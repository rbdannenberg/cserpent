// class Program:

//     // map<string, true> (imitate hash set)
//     var loaded_files

//     def init():
//         this.loaded_files = {}

require "debug"

# Abstract base class for all
class Expression:
    def init():
        pass

    def accept(visitor):
        pass

class Literal(Expression):
    var value # a value of type object_type e.g. 5, "hello", etc.
    var object_type # : string

    def init(_value, _object_type):
        super.init()
        value = _value
        object_type = _object_type

    def accept(visitor):
        visitor.visitLiteral(this)

class Identifier(Expression):
    var value # : string

    def init(_value):
        super.init()
        value = _value

    def accept(visitor):
        visitor.visitIdentifier(this)

class BinOp(Expression):
    var left # : Expression
    var op  # : string (one of +, -, *, /, %, &, |, ^, <<, >>, **)
    var right # : Expression
    def init(_left, _op, _right):
        super.init()
        left = _left
        op = _op
        right = _right

    def accept(visitor):
        visitor.visitBinOp(this)

class UnaryOp(Expression):
    var op # : string (one of +, -, not, ~)
    var value # : Expression
    def init(_op, _value):
        super.init()
        op = _op
        value = _value

    def accept(visitor):
        visitor.visitUnaryOp(this)

class Array(Expression):
    var elements # : Array[Expression]
    def init(_elements):
        super.init()
        elements = _elements

    def accept(visitor):
        visitor.visitArray(this)

class Dictionary(Expression):
    var pairs # : Array[Array[Expression, Expression]], no tuples
    def init(_pairs):
        super.init()
        pairs = _pairs

    def accept(visitor):
        visitor.visitDictionary(this)

class ArgumentList:
    var args # : Array [Expression]
    var kwargs # : Dictionary[Identifier, Expression]
    var dispatch
    def init(_args, _kwargs):
        args = _args
        kwargs = _kwargs
        dispatch = "static"

    def accept(visitor):
        visitor.visitArgumentList(this)

class FunctionCall(Expression):
    var name # : string
    var parameters # : ArgumentList
    def init(_name, _parameters):
        super.init()
        name = _name
        parameters = _parameters

    def accept(visitor):
        visitor.visitFunctionCall(this)

class Constructor(Expression):
    var name # : string
    var parameters # : ArgumentList
    # this is isomorphic to FunctionCall
    def init(_name, _parameters):
        super.init()
        name = _name
        parameters = _parameters

    def accept(visitor):
        visitor.visitConstructor(this)

class MethodCall(Expression):
    var object # : Expression
    var method_name # : Identifier
    var parameters # : ArgumentList
    def init(_object, _method_name, _parameters):
        super.init()
        object = _object
        method_name = _method_name
        parameters = _parameters

    def accept(visitor):
        visitor.visitMethodCall(this)

class GetAttribute(Expression):
    var object # : Expression
    var attribute # : string
    var rhs # : bool
    def init(_object, _attribute):
        super.init()
        object = _object
        attribute = _attribute
        rhs = true

    def accept(visitor):
        visitor.visitGetAttribute(this)

class Index(Expression):
    var object # : Expression
    var index # : Expression
    def init(_object, _index):
        super.init()
        object = _object
        index = _index

    def accept(visitor):
        visitor.visitIndex(this)

class BlockElement:

    def accept(visitor):
        pass

class Statement(BlockElement):

    def accept(visitor):
        pass

# TODO: change name for `identifier` (currently preserved for compatibility)
class Assignment(Statement):
    var identifier # : Expression
    var expression # : Expression
    def init(_identifier, _expression):
        super.init()
        identifier = _identifier
        expression = _expression

    def accept(visitor):
        visitor.visitAssignment(this)

class StandaloneExpression(Statement):
    var expression # : Expression
    def init(_expression):
        super.init()
        expression = _expression

    def accept(visitor):
        visitor.visitStandaloneExpression(this)

class Declaration(Statement):
    var declared_type # : string
    var identifier # : Identifier
    def init(_identifier, optional _declared_type = "Any"):
        super.init()
        declared_type = _declared_type
        identifier = _identifier

    def accept(visitor):
        visitor.visitDeclaration(this)

class DeclarationNAssignment(Statement):
    var declared_type # : string
    var identifier # : string
    var expression # : Expression
    def init(_declared_type, _identifier, _expression):
        super.init()
        declared_type = _declared_type
        identifier = _identifier
        expression = _expression

    def accept(visitor):
        visitor.visitDeclarationNAssignment(this)

class ReturnStatement(Statement):
    var expression # : Expression
    def init(_expression):
        super.init()
        expression = _expression

    def accept(visitor):
        visitor.visitReturnStatement(this)

class ControlFlow(BlockElement):

    def accept(visitor):
        pass

class Block:
    var statements # : List[BlockElement]
    def init(_statements):
        statements = _statements

    def accept(visitor):
        visitor.visitBlock(this)

class If(ControlFlow):
    var condition # : Expression # must be a boolean
    var block # : Block
    var else_block # : Block
    def init(_condition, _block, optional _else_block=nil):
        super.init()
        condition = _condition
        block = _block
        else_block = _else_block

    def accept(visitor):
        visitor.visitIf(this)

class While(ControlFlow):
    var condition # : Expression # must be a boolean
    var block # : Block
    def init(_condition, _block):
        super.init()
        condition = _condition
        block = _block

    def accept(visitor):
        visitor.visitWhile(this)

class ForRange(ControlFlow):
    var identifier # : Identifier # loop variable
    var start # : Expression
    var end # : Expression
    var by_amount # : Expression
    var block # : Block
    def init(_identifier, _start, _end, _by, _block):
        super.init()
        identifier = _identifier
        start = _start
        end = _end
        by_amount = _by
        block = _block

    def accept(visitor):
        visitor.visitForRange(this)


class ForEach(ControlFlow):
    var identifier # : Identifier # loop variable
    var iter # : Expression
    var block # : Block
    def init(_identifier, _iter, _end, _block):
        super.init()
        identifier = _identifier
        iter = _iter
        block = _block

    def accept(visitor):
        visitor.visitForEach(this)


class Function:
    var name # : string
    # Note: no type definitions yet
    var positional # : List[string]
    var optional   # : List[string + Expression]
    var block # : Block
    def init(_name, _positional, _optional, _block):
        name = _name
        positional = _positional
        optional = _optional
        block = _block

    def accept(visitor):
        visitor.visitFunction(this)

class Class:
    var name # : string
    var member_variables # : List[string] # but how to handle types?
    var member_functions # : List[Function]
    var parents # : List[string]
    def init(_name, _member_variables, _member_functions):
        name = _name
        member_variables = _member_variables
        member_functions = _member_functions

    def accept(visitor):
        visitor.visitClass(this)

class File:
    var elements # list of class/function/block elements, List[Class | Function | BlockElement] if you will
    def init(_elements):
        elements = _elements

    def accept(visitor):
        visitor.visitFile(this)

# for debugging: print the tree
def print_ast(ast, optional prefix=""):
    if isarray(ast):
        for child in ast:
            print_ast(child, prefix)
        return
    if isdict(ast):
        for key in ast.keys():
            print(prefix + key)
            print_ast(ast[key], prefix + "---")
        return
    if not isobject(ast):
        print(prefix + str(ast))
        return
    # Extracts the node name from the internal Serpent representation
    class_name_plus = str(ast)
    close_paren_idx = find(class_name_plus, ")")
    class_name = subseq(class_name_plus, 5, close_paren_idx)
    # Recursively prints a node and its children
    print(prefix + class_name)
    // if class_name == "Class":
    //     print("DEBUG: " + str(ast.name))
    // if class_name == "Assignment":
    //     print("DEBUG: " + str(ast.expression) + " and " + str(ast.identifier))
    // if class_name == "BinOp":
    //     print("DEBUG: " + str(ast.left) + " and " + str(ast.right))

    for child in object_variables(ast).values():
        print_ast(child, prefix + "-----")

# Test case for print_ast:
def test_print_ast():
    var ast = File([Declaration(Identifier("a")), Declaration(Identifier("b"))])
    print_ast(ast)
    # Combine the provided ASTs into one larger AST
    combined_ast = File([
    Identifier("test_identifier"),
    BinOp(Identifier("a"), "+", Identifier("b")),
    FunctionCall(Identifier("my_function"), ArgumentList([Identifier("arg1"), Identifier("arg2")], {})),
    Class(Identifier("MyClass"), [Declaration(Identifier("var1"))], [Function(Identifier("func1"), [], [], Block([]))]),
    File([Declaration(Identifier("var1")), Function(Identifier("func1"), [], [], Block([]))])
    ])
    print_ast(combined_ast)
