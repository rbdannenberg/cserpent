# The Computer Language Benchmarks Game
# https://salsa.debian.org/benchmarksgame-team/benchmarksgame/
#
# contributed by Antoine Pitrou
# modified by Dominique Wahli
# modified by Heinrich Acker


class Tree:
    var left     #default both constructors set to nil, no need to write init in serpent
    var right


def make_tree(depth):
    if depth == 0:
        return Tree()
    depth = depth - 1

    var new_tree = Tree()
    new_tree.left = make_tree(depth)
    new_tree.right = make_tree(depth)

    return new_tree


def check_tree(node):
    if node.left == nil:
        return 1
    return 1 + check_tree(node.left) + check_tree(node.right)


# def main(arg):
#     var min_depth = 4
#     var max_depth = max(min_depth + 2, arg)
#     var stretch_depth = max_depth + 1
#
#     print("stretch tree of depth " + str(stretch_depth) + " check: " + str(check_tree(make_tree(stretch_depth))))
#
#
#     var long_lived_tree = make_tree(max_depth)
#
#     var iterations = int(2**max_depth)
#     #var iterations = 2**max_depth
#
#
#     for depth = min_depth to stretch_depth by 2:
#
#         var check = 0
#         for i = 1 to (iterations+1):
#             check = check + check_tree(make_tree(depth))
#
#
#         print(str(iterations) + " trees of depth " + str(depth) + " check: " + str(check))
#
#         iterations  = idiv(int(iterations), 4)
#
#     print("long lived tree of depth " + str(max_depth) + " check:" + str(check_tree(long_lived_tree)))
#
#
#
# # BENCHMARKING:
#
# for i = 0 to 5:
#     //start_time = time_get()
#     main(15)
#     //end_time = time_get()
#
#     //execution_time = end_time - start_time
#
#     //print(execution_time)

