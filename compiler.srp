# usage: serpent64 compiler.srp [-d] <file-to-compile>.srp [-o <output-folder>] [-c]
# diff <(serpent64 compiler.srp benchmarks/srp/binary-trees.srp -o output) <(echo "exit()" | serpent64 benchmarks/srp/binary-trees.srp)

require "src/frontend/compile"
require "src/backend/codegen_visitor"
require "utils"
load "debug"

# [-d]: debug flag, prints the AST
# <file-to-compile>.srp: the file to compile
# [-c]: compile flag, compiles the generated code

debug = false
compile = false
output_folder = "output"
# parsing command line options
i = 1
while i < len(command_line_arguments):
    if command_line_arguments[i] == "-d":
        debug = true
        command_line_arguments.uninsert(i)
    elif command_line_arguments[i] == "-c":
        compile = true
        command_line_arguments.uninsert(i)
    elif command_line_arguments[i] == "-o":
        if i + 1 >= len(command_line_arguments):
            print "Needs output folder"
            exit()
        output_folder = command_line_arguments[i + 1]
        command_line_arguments.uninsert(i)
        command_line_arguments.uninsert(i)
    else:
        i = i + 1
if len(command_line_arguments) != 2:
    print "Incorrect number of arguments"
    print command_line_arguments
    exit()
original_target_file = command_line_arguments[1] # relative path, has .srp suffix
output_folder = change_file_suffix(output_folder, nil)
mkdir(output_folder)

session = CompilationSession()
res = session.load_main_file(original_target_file)
if res != nil:
    print format_error(res)

visitor = CodegenVisitor(output_folder)
pass = 8 # so an error isn't thrown for empty base class
cmake_files = []
for target_file in session.get_topological_ordering():
    var ast = session.files[target_file]
    if debug:
        print_ast(ast)

    var is_main = original_target_file == target_file
    var target_filename = change_file_suffix(file_from_path(target_file), nil)
    if target_filename == "main":
        target_filename = "main__" # main is a reserved word in C++
    visitor.generate_code(target_filename, ast, session.deps[target_file], main=is_main)
    if is_main:
        cmake_files.append("main.cpp")
    cmake_files.append(target_filename + ".cpp")
    cmake_files.append(target_filename + ".h")
cmake_files.append("global_vars.cpp")
if compile:
    # write CMakeLists.txt
    output_folder = output_folder + "/"
    cmake_lists = open(output_folder + "CMakeLists.txt", "w")
    cmake_lists.write("cmake_minimum_required(VERSION 3.29)\n")
    cmake_lists.write("project(output)\n")
    cmake_lists.write("set(CMAKE_CXX_STANDARD 17)\n")
    cmake_lists.write("add_compile_options(-Wno-return-type -Wplacement-new=0)\n")
    cmake_lists.write("set(CMAKE_INTERPROCEDURAL_OPTIMIZATION_RELEASE TRUE)\n")
    cmake_lists.write("\n")
    cmake_lists.write("# normal set of include paths:\n")
    // cmake_lists.write("include_directories(\n")
    // wd = getcwd() # note this ends with "/"
    // runtime_directories = ["src/runtime", "src/runtime/data_structures", 
    //         "src/runtime/builtin_functions", "src/gc", "src/runtime/globals"]
    // for include_path in runtime_directories:
    //     cmake_lists.write("        " + wd + include_path + "\n")
    // cmake_lists.write(")\n")
    // cmake_lists.write("find_library(RUNTIME_LIB_PATH NAMES libruntime.a\n")
    // cmake_lists.write("        PATHS " + wd + "/Release " + wd + "/Debug " +
    //                   wd + "/cmake-build-release\n")
    // cmake_lists.write("        DOC \"cserpent runtime library\")\n")
    // cmake_lists.write("set(RUNTIME_LIB_PATH \"" + wd +
    //                   "cmake-build-release/libruntime.a\")\n")
    cmake_lists.write("# runtime library\n")
    cmake_lists.write("add_subdirectory(../src/runtime build)\n")

    cmake_lists.write("add_executable(output\n")
    for file in cmake_files:
        cmake_lists.write("        " + file + "\n")
    cmake_lists.write(")\n")
    // cmake_lists.write("target_link_libraries(output \"${RUNTIME_LIB_PATH}\")\n")
    cmake_lists.write("target_link_libraries(output runtime)\n")
    cmake_lists.close()
    if debug:
        print "--------------- wrote", output_folder + "CMakeLists.txt",
        print         "----------------"
    # compile code
    cmake_configure = "cmake -DCMAKE_BUILD_TYPE=Release -S " + output_folder +
                      " -B " + output_folder + "build" +  " --fresh"
    cmake_build = "cmake --build " + output_folder + "build"
    if not debug:
        cmake_configure = cmake_configure + " > /dev/null"
        cmake_build = cmake_build + " > /dev/null"
    else:
        print "--------------- running cmake configure step ----------------"
        print "-->", cmake_configure
    system(cmake_configure)
    if debug:
        print "--------------- finished cmake configure step ---------------"
        print "--------------- running cmake build step --------------------"
        print "-->", cmake_build
    system(cmake_build)
    if debug:
        print "--------------- finished cmake build step -------------------"
        print "--------------- running compiled program --------------------"
        print "-->", "./" + output_folder + "build/output"
    system("./" + output_folder + "build/output")
    if debug:
        print "--------------- compiled program finished -------------------"
        print "--- to run it again, use this command:"
        print "---", "./" + output_folder + "build/output"
        print "-------------------------------------------------------------"
    

exit()
