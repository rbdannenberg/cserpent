//Source: https://github.com/attractivechaos/plb2/blob/master/src/python/sudoku.py

#!/usr/bin/env python


load "debug"

class Tree:
    var left
    var right


def sd_genmat():    
    var C = [[idiv(n, 9), idiv(n, 81)*9 + n%9 + 81, n%81 + 162, n%9*9 + idiv(n, 243)*3 + idiv(n, 27)%3 + 243] for n = 0 to 729]
    
    var R = [[] for c = 0 to 324]
    for r = 0 to 729:
        for c2 = 0 to 4:
            R[C[r][c2]].append(r)


    var new_tuple = Tree()        
    new_tuple.left = R
    new_tuple.right = C
    return new_tuple

def sd_update(R, C, sr, sc, r, v):
    var m = 10
    var m_c = 0
    for c in C[r]:
        sc[c] = sc[c] + (v<<7)

    for c in C[r]:
        if v > 0:
            for rr in R[c]:
                sr[rr] = sr[rr] + 1
                if sr[rr] == 1:
                    for cc in C[rr]:
                        sc[cc] = sc[cc] - 1
                        if sc[cc] < m:
                            m = sc[cc]
                            m_c = cc
        else:
            for rr in R[c]:
                sr[rr] = sr[rr] - 1
                if sr[rr] == 0:
                    p = C[rr]
                    sc[p[0]] = sc[p[0]] + 1;
                    sc[p[1]] = sc[p[1]] + 1;
                    sc[p[2]] = sc[p[2]] + 1;
                    sc[p[3]] = sc[p[3]] + 1;

    var n_tuple = Tree()        
    n_tuple.left = m
    n_tuple.right = m_c
    return n_tuple

    

def inner_loop():
    while i >= 0 and i < 81 - hints:
        if d == 1:
            if m > 1:
                for c = 0 to 324:
                    if sc[c] < m:
                        m = sc[c]
                        cc[i] = c
                        if m < 2:
                            return 
            if m == 0 or m == 10:
                cr[i] = -1
                d = -1
                i = i - 1
        c = cc[i]
        if d == -1 and cr[i] >= 0:
            sd_update(R, C, sr, sc, R[c][cr[i]], -1)
        r2_ = 9
        for r2 = cr[i]+1 to 9:
            if sr[R[c][r2]] == 0:
                r2_ = r2
                return
        if r2_ < 9:
            update_tuple = sd_update(R, C, sr, sc, R[c][r2], 1)
            m = update_tuple.left
            cc[i+1] = update_tuple.right
            cr[i] = r2
            d = 1
            i = i + 1
        else:
            cr[i] = -1
            d = -1
            i = i - 1

    print("LAST INSIDE INNER LOOP: ")

    print("i: ")
    print(i)
    print("\n")
    
    print("sr: ")
    print(sr)
    print("\n")

    print("sc: ")
    print(sc)
    print("\n")

    print("cr: ")
    print(cr)
    print("\n")

    print("cc: ")
    print(cc)
    print("\n")
        
def sd_solve(R, C, s):
    ret = []
    out = []
    hints = 0
    sr = [0 for j = 0 to 729]
    sc = [9 for j = 0 to 324]
    cr = [-1 for j = 0 to 81]
    cc = [-1 for j = 0 to 81]
    
    for j = 0 to 81:
        if ord(s[j]) >= 49 and ord(s[j]) <= 57:
            a = ord(s[j]) - 49
        else: a = -1
        if a >= 0:
            // print(sc)
            // print("\n")
            sd_update(R, C, sr, sc, j * 9 + a, 1)
            hints = hints + 1
        out.append(a + 1)

    // print("sr: ")
    // print(sr)
    // print("\n")

    // print("sc: ")
    // print(sc)
    // print("\n")

    // print("cr: ")
    // print(cr)
    // print("\n")

    // print("cc: ")
    // print(cc)
    // print("\n")



        
    i = 0
    m = 10        
    d = 1

    
    while true:
        if i < 0:
            return ret
        
        y = subseq(out, 0, 81)

        for j = 0 to i:
            r = R[cc[j]][cr[j]]
            y[idiv(r,9)] = r%9 + 1

        ret.append(y)
        i = i - 1
        d = d - 1 
    return ret





def main(n):
    a = ["", "..............3.85..1.2.......5.7.....4...1...9.......5......73..2.1........4...9", ".......12........3..23..4....18....5.6..7.8.......9.....85.....9...4.5..47...6...", ".2..5.7..4..1....68....3...2....8..3.4..2.5.....6...1...2.9.....9......57.4...9..", "........3..1..56...9..4..7......9.5.7.......8.5.4.2....8..2..9...35..1..6........", "12.3....435....1....4........54..2..6...7.........8.9...31..5.......9.7.....6...8", "1.......2.9.4...5...6...7...5.9.3.......7.......85..4.7.....6...3...9.8...2.....1", ".......39.....1..5..3.5.8....8.9...6.7...2...1..4.......9.8..5..2....6..4..7.....", "12.3.....4.....3....3.5......42..5......8...9.6...5.7...15..2......9..6......7..8", "..3..6.8....1..2......7...4..9..8.6..3..4...1.7.2.....3....5.....5...6..98.....5.", "1.......9..67...2..8....4......75.3...5..2....6.3......9....8..6...4...1..25...6.", "..9...4...7.3...2.8...6...71..8....6....1..7.....56...3....5..1.4.....9...2...7..", "....9..5..1.....3...23..7....45...7.8.....2.......64...9..1.....8..6......54....7", "4...3.......6..8..........1....5..9..8....6...7.2........1.27..5.3....4.9........", "7.8...3.....2.1...5.........4.....263...8.......1...9..9.6....4....7.5...........", "3.7.4...........918........4.....7.....16.......25..........38..9....5...2.6.....", "........8..3...4...9..2..6.....79.......612...6.5.2.7...8...5...1.....2.4.5.....3", ".......1.4.........2...........5.4.7..8...3....1.9....3..4..2...5.1........8.6...", ".......12....35......6...7.7.....3.....4..8..1...........12.....8.....4..5....6..", "1.......2.9.4...5...6...7...5.3.4.......6........58.4...2...6...3...9.8.7.......1", ".....1.2.3...4.5.....6....7..2.....1.8..9..3.4.....8..5....2....9..3.4....67.....", ""]
    sd_tuple = sd_genmat()
    R = sd_tuple.left
    C = sd_tuple.right
    # print(R)
    #print(C)
    
    for i = 0 to n:
        for l = 0 to 22:
            if len(a[l]) >= 81:
                # print(a[l])
                ret = sd_solve(R, C, a[l]);
                # print(ret)
                return
                #for j in ret:
                #    print(''.join(map(str, j)))
                #print('');


# BENCHMARKING:
main(1)
for i = 0 to 100:
     start_time = time_get()
     main(20)
     end_time = time_get()
    
     execution_time = end_time - start_time
     print(execution_time)
