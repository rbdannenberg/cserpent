Nan-boxing in CSerpent

(See "Notes on Nan-boxing" below for more design details)

Here is how things are represented in CSerpent:

Type Any is a union with uint64_t and double fields. Type
determination and checking is done by looking at the unint64_t. 

Quiet NaNs are FFF8... to FFFF...
NaN values are 7FF8... (canonical), 7FF0... (inf), FFF0... (-inf)
Quieted canonical NaN (I think) isi FFF8

Unused NaNs are therefore FFF9... to FFFF....

Doubles are biased by 1<<48 to use the range 0001... to FFFA...

Pointers use the range 0000....
Pointers include CSerpent objects, Arrays, Dicts, 

Integers (49-bit signed) have high order bits FFFE and FFFF and are
decoded by sign-extending the sign bit at 0001....

Symbols use the high order bits FFFB

Short strings use the high order bits FFFC

Strings use the high order bits FFFD



Notes on Nan-boxing

Nan-boxing means using NaN (not-a-number) floating point values
to encode other types along with type information. Fortunately,
Serpent uses Nan-boxing and notes and implementation from
Serpent provide a good start.

Basically, doubles do not occur "naturally" with high order bits
from FFF9 to FFFF, which gives 7 x 2^48 different values. We need
only 2^48 values for pointers, leaving 6 x 2^48 for other types.

In Serpent, we have only integers and short strings, but we used
4 x 2^48 values for integers, making integers, including the sign,
50 bits, not 48.

In Serpent values are "biased" by adding 6*2^48 so that the
high-order 16 bits of pointers are 0, and nullptr is represented
as zero. This seems like a good idea. A consequence is that to
decode a value to floating point, you must subtract 6 << 48 to
get the proper high-order bits of the double.

Another detail is that if values are represented as an unsigned
int (uint64_t), you must store it to a union type and read it
as a double. There is no in-line expression to do this, although
I suppose you could make the union type a global or thread-local
variable since you only need it temporarily.


Note on short strings: these are strings packed into the
remaining 48-bits and in particular includes single characters
which are probably the most common string encountered. In string
processing, this should save a lot of dynamic memory allocation,
e.g. iterating over a string and returning mystring[i] for each
character can avoid any memory allocation and just return nan-boxed
short strings rather than allocating at least 32 bytes in the heap
for each character.

Keeping with 50 bit integers, and allowing for short strings, we
have 2^48 unused values. I think it is useful to implement Symbol
as a distinct nan-boxed type since Symbols are used in Serpent for
keywords, function and method names, and for the generic truth value
(true names a global variable whose value is the Symbol 'true').
When compiling to C++, it might be advantageous to be able to
declare variables to be of type Symbol and to have a quick check
for Symbol-type values. On the other hand, the alternative is to
make Symbol act like a built-in class, in which case it might be
easier to implement methods on Symbols.

Object Representation

In CSerpent, objects should compile to ordinary instances of C++
classes, but we still need a super-class of all CSerpent classes
to support the more dynamic typing of CSerpent and garbage
collection.

Every CSerpent object needs these fields (member variables):
- gray_list -- a link to the next object on the gray list, which
    is list of reachable objects whose references have not yet
    been marked in the mark phase of garbage collection.
- class_symbol -- a pointer to a Symbol that names the class.
    Used mainly for dynamic type checking.

In Serpent, every object on the heap derives from a base class that
consists of an 8-byte header that is packed with a type code:
- Serpent object
- Array
- Array data
- String
- String data
- Dict
- Stack frame
- Method (virtual machine code)
- Class
- Symbols (a symbol table)
- ... and more ...

In CSerpent, we do not have so many types of Heap_obj.

For the GC to "understand" all data structures, everything in the
cserpent heap must be a Heap_obj.

Length is encoded in the header (usually) so that we can have only 8
bytes of overhead vs 16 with a separate word for length, although I
don't think the argument to save space is very strong. Maybe function
pointers can be header+pointer = 16bytes, and maybe the best argument
is strings: 8byte+sizeof(string) = 32bytes. If either was 8 bytes
longer due to a dedicated 64-bit length count, the sizes would become
32 and 48 bytes because we're allocating in 16byte units. (Of course,
all of these are design choices, so who knows what's really best?)

Since there's only room for 12 bits of length, we get objects up to
4095 words or 32K bytes. Maybe that's enough for ordinary objects,
but what about array data? For those, Heap_obj has to define a place
after the header to store a longer length count. The convention is
that if the short 12-bit length is zero, the actual length is stored
in the next word.

So the 2nd word of Heap_obj does double duty as either a length (for
array data) or the first field of an object.

For objects, there's not nearly enough space in the header to encode
all possible (user defined) classes, so the first field will be a
pointer to a class structure (another subclass of Heap_obj) that
among other things, will have to describe what slots in the object are
possibly pointers (i.e. they are Any slots) for the garbage collector.
I suggest using a bitmap, with each word describing the next 64 fields
as either Any or not an Any.

For strings, the first field after the header will be a C++ string.

In Cserpent, like real and int, you can declare a string, allowing the
compiler to use the built-in string class directly. If you convert a
string to an Any*, you must construct a CSString (inherits from
Heap_obj) and copy the string into it (in C++ this is a shallow copy
that does not copy the actual string data). So you could end up with
multiple CSString objects referencing the same underlying string. On
the other hand, if you copy an Any* to an Any*, e.g.
    var x = "foo"
    var y = x
then you just need to copy the 8-bytes of the Any, and you do not
allocate another CSString. The CSString is now referenced by multiple
pointers, but it's on the heap and will get GC'd when the references
all go away. When the CSString is deleted, C++ reference counting will
free the actual string data.

